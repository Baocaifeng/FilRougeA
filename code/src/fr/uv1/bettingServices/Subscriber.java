package fr.uv1.bettingServices;

import java.util.*;
import java.util.regex.Pattern;

import fr.uv1.bettingServices.exceptions.*;

/**
 * 
 * @author Alban GOUGOUA & Henri-Michel KOUASSI <br>
 * <br>
 *         This class describes all the attributes and methods that one subscriber 
 *         could use on the betting software. <br>
 * 
 * @param lastName
 * 			The lastname of subscriber.
 * 
 * @param firstName
 * 			The firstname of subscriber.
 * 
 * @param username
 * 			The username or pseudo of subscriber.
 * 
 * @param password
 * 			The password of subscriber.
 * 
 * @param tokenNumbers
 * 			The number of tokens of subscriber.
 * 
 * @param betsSubscriber
 * 			The list of bets of subscriber.
 * 			
 */
public class Subscriber {
	
	private String lastName;
	private String firstName;
	private String username;
	private String password;
	private long tokenNumbers;
	
	private ArrayList<Bet> betsSubscriber;
	
	/**
	 * 
	 * Subscriber(String lastName, String firstName, String username, String password) is the constructor of the class Subscriber.
	 * 
	 * @param lastName.
	 * 			The lastname of subscriber.
	 * 
	 * @param firstName
	 * 			The firstname of subscriber.
	 * 
	 * @param username
	 * 			The username or pseudo of subscriber.
	 * 
	 * @param password
	 * 			The password of subscriber. This password is generated by the method subscribe of the class BettingSite.
	 * 
	 * @throws BadParametersException
	 * 			raised if the syntax of one parameter is incorrect.
	 * 
	 */
	public Subscriber(String lastName, String firstName, String username, String password) throws BadParametersException {
		
		boolean check = Pattern.matches("[a-zA-Z]{1}[ a-zA-Z-]*?", lastName);
		if(check == false) throw new BadParametersException("La syntaxe du prénom entré est incorrect.\nLe prénom doit "
				+ "contenir au moins 1 caractère. Les caractères peuvent être des lettres, tirets et espaces. "
				+ "Mais le prénom doit commencer obligatoirement par une lettre.");
		else {
			this.lastName = lastName;
		}
		
		check = Pattern.matches("[a-zA-Z]{1}[ a-zA-Z-]*?", firstName);
		if(check == false) throw new BadParametersException("La syntaxe du nom entré est incorrect.\nLe nom doit "
				+ "contenir au moins 1 caractère. Les caractères peuvent être des lettres, tirets et espaces. "
				+ "Mais le nom doit commencer obligatoirement par une lettre.");
		else {
			this.firstName = firstName;
		}
		
		check = Pattern.matches("[a-zA-Z0-9]{4,}+", username);
		if(check == false) throw new BadParametersException("La syntaxe du nom d'utilisateur entré est incorrect.\nLe nom "
				+ "d'utilisateur doit contenir au moins 4 caractères. Les caractères peuvent être des lettres "
				+ "et des chiffres uniquement.");
		else {
			this.username = username;
		}
		
		check = Pattern.matches("[a-zA-Z0-9]{8,}+", password);
		if(check == false) throw new BadParametersException("La syntaxe du mot de passe fourni est incorrect.\nLe mot de passe doit avoir 8 caractères minimum "
    			+ "et doit être constitué de chiffres et de lettres uniquement.");
		else {
			this.password = password;
		}
		
		tokenNumbers = 0L;
		betsSubscriber = new ArrayList<Bet>();
	}
	
	/**
	 * 
	 * checks if the password input matches with the password of subscriber.
	 * 
	 * @param password
	 * 			The password input.
	 * 
	 * @throws AuthenticationException
	 * 			raised if the password input doesn't match with the password of subscriber.
	 * 			raised if password input doesn't respect the syntax of password.
	 * 
	 */
	public void authenticateSubscriber(String password) throws AuthenticationException {
		
		boolean check = Pattern.matches("[a-zA-Z0-9]{8,}+", password);
    	
    	if(check == false) throw new AuthenticationException("La syntaxe du mot de passe entré est incorrect.\nLe mot de passe doit avoir 8 caractères minimum "
    			+ "et doit être constitué de chiffres et de lettres uniquement.");

    	else {
    		if(this.password != password) throw new AuthenticationException("Le mot de passe entré est incorrect.");
    	}
	}
	
	/**
	 * changes the password of subscriber.
	 * 
	 * @param newPwd
	 * 			The new password input by the subscriber.
	 * 
	 * @param currentPwd
	 * 			The current password of subscriber.
	 * 
	 * @throws AuthenticationException
	 * 			raised if the currentPwd input doesn't match with the password of subscriber.
	 * 
	 * @throws BadParametersException
	 * 			raised if passwords input don't respect the syntax of password.
	 * 
	 */
	public void changeSubsPwd(String newPwd, String currentPwd) throws AuthenticationException, BadParametersException {
		
		boolean check1 = Pattern.matches("[a-zA-Z0-9]{8,}+", newPwd);
		boolean check2 = Pattern.matches("[a-zA-Z0-9]{8,}+", currentPwd);
		
		if((check1 == false) || (check2 == false)) throw new BadParametersException("La syntaxe du mot de passe entré est incorrect.\nLe mot de passe doit avoir 8 caractères minimum "
				+ "et doit être constitué de chiffres et de lettres uniquement.");

		else {
			if(password != currentPwd) throw new AuthenticationException("Le mot de passe entré est incorrect.");
			
			else {
				password = newPwd;
			}
		}
	}
	
	/**
	 * give the lastname of subscriber.
	 * 
	 * @return lastName
	 * 			The lastname of subscriber.
	 * 
	 */
	public String getLastName() {
		
		return lastName;
	}
	
	/**
	 * give the firstname of subscriber.
	 * 
	 * @return firstName
	 * 			The firstname of subscriber.
	 * 
	 */
	public String getFirstName() {
			
			return firstName;
		}
	
	/**
	 * give the username of subscriber.
	 * 
	 * @return username
	 * 			The username of subscriber.
	 * 
	 */
	public String getUsername() {
		
		return username;
	}
	
	/**
	 * give the total number of tokens of a subscriber.
	 * 
	 * @return tokenNumbers
	 * 			The number of tokens of subscriber.
	 * 
	 */
	public long getNumberTokens() {
		
		return tokenNumbers;
	}
	
	/**
	 * checks if the debit is possible by the subscriber.
	 * 
	 * @param tokenToDebit
	 * 			The number of tokens to debiting on the number of tokens of subscriber.
	 * 
	 * @return true
	 * 			if the tokenToDebit is less than the number of tokens of subscriber.
	 * 
	 * @throws BadParametersException
	 * 			raised if the tokenToDebit is less than or equal 0.
	 * 
	 */
	public boolean isDebitPossible(long tokenToDebit) throws BadParametersException {
		
		if(tokenToDebit <= 0) throw new BadParametersException("Le nombre de jetons entré est incorrect car soit il est négatif (< 0) soit nul (égale à 0).");
		
		else {
			if(tokenNumbers >= tokenToDebit) return true;
			else return false;
		}
	}
	
	/**
	 * credit number of tokens of subscriber.
	 * 
	 * @param numberTokens
	 * 			The number of tokens to crediting.
	 * 
	 * @throws BadParametersException
	 * 			raised if the numberTokens is less than or equal to 0.
	 * 
	 */
	public void creditSubscriber(long numberTokens) throws BadParametersException {
		
		if(numberTokens <= 0) throw new BadParametersException("Le nombre de jetons entré est incorrect car soit il est négatif (< 0) soit nul (égale à 0).");
		
		else {
			tokenNumbers += numberTokens ;
		}
	}
	
	/**
	 * debit number of tokens of subscriber.
	 * 
	 * @param numberTokens
	 * 			The number of tokens to debiting.
	 * 
	 * @throws BadParametersException
	 * 			raised if the numberTokens is less than or equal to 0.
	 * 			raised if the debit is impossible.
	 * 
	 */
	public void debitSubscriber(long numberTokens) throws BadParametersException {
		
		if(numberTokens <= 0) throw new BadParametersException("Le nombre de jetons entré est incorrect car soit il est négatif (< 0) soit nul (égale à 0).");
		
		else {
			if(this.isDebitPossible(numberTokens)) tokenNumbers -= numberTokens;
			else throw new BadParametersException("Le béit est impossible. Le nombre de tokens du joueur "
					+ "est inférieur au nombre de tokens à débiter.");
		}
	}
	
	/**
	 * add a bet in the list of bets of subscriber.
	 * 
	 * @param bet
	 * 			The bet to adding.
	 * 
	 */
	public void addBet(Bet bet) {
		
		betsSubscriber.add(bet);
	}
	
	/**
	 * give the list of all bets of subscriber.
	 * 
	 * @return betsSubscriber
	 * 			The list of all bets of subscriber.
	 * 
	 */
	public ArrayList<Bet> getBetsSubscriber() {
		
		return betsSubscriber;
	}
	
	/**
	 * cancel a bet of subscriber.
	 * 
	 * @param betDone
	 * 			The bet of subscriber to canceling.
	 * 
	 * @throws ExistingBetException
	 * 			raised if the bet to canceling doesn't exist.
	 * 
	 * @throws BadParametersException
	 * 			raised if the numberTokens is less than or equal to 0.
	 *  
	 */
	public void cancelBet(Bet betDone) throws ExistingBetException, BadParametersException {
		
		long numberTokens = 0L;
		
		ArrayList<Bet> betsList = (ArrayList<Bet>) betsSubscriber.clone();
		if(betsList.contains(betDone) == true) {
			for(Bet bet : betsList) {
				if(bet.equals(betDone)) {
					numberTokens = betDone.numberTokens;
					betsSubscriber.remove(betDone);
				}
			}

			this.creditSubscriber(numberTokens);
		}
		
		else throw new ExistingBetException("Ce pari n'existe pas.");
	}
	
	/**
	 * cancel all bets of subscriber.
	 * 
	 */
	public void cancelAllBets() {
		
		betsSubscriber = new ArrayList<Bet>() ;
	}
	
	/**
	 * remove a bet of subscriber.
	 * 
	 * @param betToDelete
	 * 			The bet of subscriber to removing.
	 * 
	 * @throws ExistingBetException
	 * 			raised if the bet to deleting doesn't exist.
	 * 
	 */
	public void removeBet(Bet betToDelete) throws ExistingBetException {
		
		ArrayList<Bet> betsList = (ArrayList<Bet>) betsSubscriber.clone();
		if(betsList.contains(betToDelete) == true) {
			for(Bet bet : betsList) {
				if(bet.equals(betToDelete)) {
					betsSubscriber.remove(betToDelete);
				}
			}
		}
		
		else throw new ExistingBetException("Ce pari n'existe pas.");
	}
	
	/**
	 * checks if a subscriber username is equal to another subscriber username.
	 * 
	 * @param username
	 * 			The username of another subscriber.
	 * 
	 * @return true
	 * 			if the two subscribers have the same username or pseudo.
	 * 
	 */
	public boolean equals(String username) {
		
		if(this.username.equals(username)) return true;
		else return false;
	}
	
	/**
	 * give the information of subscriber.
	 * 
	 */
	public String toString() {
		
		String response = "Ce joueur s'appelle " + lastName +  " " + firstName + ", son nom d'utilisateur est "
				+ username + " et il a " + tokenNumbers + " jetons." ;
		return response;
	}
	
	public static void main(String[] args) throws AuthenticationException, ExistingSubscriberException, BadParametersException {

		Scanner scan = new Scanner(System.in);
		Subscriber subs1 = new Subscriber("Alban", "GOUGOUA", "NABLA", "MonbonPetit");
		Subscriber subs2 = new Subscriber("Ange", "GOUGOUA", "Willy", "Zagbayou");
		System.out.println("NABLA est-il Willy ? " + subs1.equals(subs2));
		System.out.println(subs1.toString());
		System.out.println(subs2.toString());
		System.out.println(subs1.isDebitPossible(10L));
		subs1.creditSubscriber(20L);
		System.out.println(subs1.toString());
		subs1.changeSubsPwd("albanDonald09", "MonbonPetit");
		scan.close();
	}
	
}
